Notably on Peter Norvig's custom sudoku solver this is the hardest of a number of randomly generated puzzles:

.....6....59.....82....8....45........3........6..3.54...325..6..................

It takes 188.79 seconds to solve using his backtracking sudoku method. The SAT solver method doesn't have such variability in the results (All puzzles tested are similar timescale regardless of input "difficulty"). 

Solution for valid input #0
minimum time: 0.00442314147949
3 7 8 | 5 1 6 | 4 2 9
6 5 9 | 2 3 4 | 7 1 8
2 1 4 | 7 9 8 | 3 6 5
---------------------
7 4 5 | 6 8 1 | 2 9 3
1 9 3 | 4 5 2 | 6 8 7
8 2 6 | 9 7 3 | 1 5 4
---------------------
4 8 1 | 3 2 5 | 9 7 6
5 3 7 | 1 6 9 | 8 4 2
9 6 2 | 8 4 7 | 5 3 1

The alternate encoding we used to test was just the same encoding but not converted to 1-729 (non-minimal). This resulted in a consistent difference in our set of test puzzles (95 puzzles). 

The way we computed time was using pythons timeit module to time how long the subprocess ./minisat took to execute. Because there is some variability with what other processes are going on at the same time we tested with runs of 50-500 iterations of each puzzle and took the minimum time (the most accurate representation of how "fast" it "could" run). We then took the average difference between encodings for all the puzzles to get some sort of numerical representation the difference. (consider converting to percentages for each and getting the average percentage??).

N X N ENCODINGS:
The option of a 16 x 16 encoding of a Sudoku puzzle solver was created and was able to sucessfully solve the puzzle listed below:

g*b**2**9*6a********4e*378**g**fdf****6*****c1e*c***a**7*1*********6*c*58**g**a**dc*b****426****e9*g***a*f*d*b**8*4**fed***c**7****d**b2*g19***3**8*3*f**b****5e6***9****d****1**g*bc**e*6f*8***5*6f**9**c**3*g*2****a*c**5*e8**3*a**7*g*e*8dc4*****f*2**9**7**6

The output of this encoding by using the SSS16.py returned the solution:
g e b 3 | 1 2 c f | 9 5 6 a | 4 7 d 8 
a 5 1 2 | 4 e d 3 | 7 8 c b | g 6 9 f 
d f 7 8 | 5 b 6 9 | g 2 4 3 | c 1 e a 
c 6 9 4 | a 8 g 7 | e 1 d f | 5 2 3 b 
--------------------------------------
b 3 f 6 | 2 c 4 5 | 8 7 e g | 1 9 a d 
7 d c a | b 9 3 1 | 5 4 2 6 | f e 8 g 
e 9 5 g | 7 6 8 a | 1 f 3 d | 2 b c 4 
8 2 4 1 | g f e d | b a 9 c | 6 3 7 5 
--------------------------------------
f 7 e d | 8 5 b 2 | c g 1 9 | a 4 6 3 
1 4 8 c | 3 d f 6 | 2 b a 7 | 9 g 5 e 
6 a 2 5 | 9 g 7 4 | 3 d 8 e | b f 1 c 
9 g 3 b | c 1 a e | 4 6 f 5 | 8 d 2 7 
--------------------------------------
5 8 6 f | e 4 9 b | d c 7 2 | 3 a g 1 
2 b g 7 | d a 1 c | 6 3 5 4 | e 8 f 9 
3 1 a 9 | 6 7 5 g | f e b 8 | d c 4 2 
4 c d e | f 3 2 8 | a 9 g 1 | 7 5 b 6 

The difference between our encoding of a hex sudoku and normal encodings is that we had to increment all the numbers by one as 0 was considered to be a null space. The solution to this problem is still the same as it doesnt matter what numbers are encoded as long as a pattern is found. Other changes that had to be made were related to the checks to print to the CNF file. It is impossible to encode a n x n size sudoku as the characters that are used must be defined and mapped to numbers but with more time we could have made the puzzle able to solve all n^2 problems for sudoku within one program by checking the puzzle length before running. The SSS16.py is also a more flexible solution to the sudoku problem and would be more of the path to follow in order to get the solver to work for all sizes. The 9x9 solution is not as general and as such would be able to run in a faster and more efficient manner.